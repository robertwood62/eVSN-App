using Fri.FieldPlotService.Api.Models;
using Fri.FieldPlotService.Common;
using Fri.FieldPlotService.Entities;
using Fri.FieldPlotService.Tools;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Localization;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Primitives;
using Microsoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account;
using System.Text;

namespace Fri.FieldPlotService.Api.Common
{
    /// <summary>
    /// Common base class for all controllers.
    /// </summary>
    public class BaseController : ControllerBase
    {
        const string BearerPrefix = "Bearer ";

        /// <summary>
        /// Provides access to the logger.
        /// </summary>
        protected readonly ILogger logger;

        /// <summary>
        /// Options information.
        /// </summary>
        protected readonly FieldPlotServiceOptions options;

        /// <summary>
        /// Constructs the BaseController with the required dependencies
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="options"></param>
        protected BaseController(ILogger logger, FieldPlotServiceOptions options)
        {
            this.logger = logger;
            this.options = options;
        }

        /// <summary>
        /// Validates the request's API key.
        /// </summary>
        protected void ValidateApiKey(string? apiKey)
        {
            if (!string.IsNullOrWhiteSpace(apiKey))
            {
                if(options.ApiKeys.Contains(apiKey))
                {
                    return;
                }
            }
            throw new UnauthorizedAccessException();
        }

        /// <summary>
        /// Gets an access token from the header.
        /// </summary>
        /// <returns></returns>
        protected UserToken ValidateUserToken(string? token)
        {
            if (!string.IsNullOrWhiteSpace(token))
            {
                var userToken = UserToken.FromString(token, options.EncryptionKey);
                return userToken;
            }
            throw new UnauthorizedAccessException();
        }


        /// <summary>
        /// Handles any exception that's generated by the system and returns back an error page.
        /// </summary>
        /// <param name="ex"></param>
        /// <returns></returns>
        protected IActionResult HandleError(Exception ex)
        {
            logger?.LogError(ex, $"Request {Request.Path}?{Request.QueryString} generated an error.");

            if (ex is UnauthorizedAccessException)
            {
                return new UnauthorizedResult();
            }
            else
            {
                return new BadRequestObjectResult(new ApiErrorModel(ex));
            }
        }

    }
}
