@page "/project/{Id:guid?}"
@inherits BasePage

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />

@if (IsInitialized)
{
    if (Id == null)
    {
        <PageTitle>@Localizer["Pages_Projects_AddProject_Title"]</PageTitle>
        <MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Projects_AddProject_Title"]</MudText>
    }
    else
    {
        <PageTitle>@Localizer["Pages_Projects_EditProject_Title"]</PageTitle>
        <MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Projects_EditProject_Title"]</MudText>
    }

    <MudPaper Class="pa-3">
        <EditForm Model="model" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />
            <MudStack Row="false">
                @if (Id == null)
                {
                    <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="VendorModel" @bind-Value="model.SelectedVendor" For="@(() => model.SelectedVendor)" Label="@Localizer["General_VendorName"]" Required="true">
                        @if (model.Vendors != null)
                        {
                            foreach (var vendor in model.Vendors)
                            {
                                <MudSelectItem T="VendorModel" Value="@vendor">@vendor.Info.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                else
                {
                    <MudText>@($"{Localizer["General_VendorName"]}: {model.SelectedVendor?.Info.Name}")</MudText>
                }
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.ProjectName" For="@(() => model.ProjectName)" Label="@Localizer["General_ProjectName"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.VsnProjectId" For="@(() => model.VsnProjectId)" Label="@Localizer["General_VsnProjectId"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Format="yyyy-MM-dd" InputType="InputType.Date" @bind-Value="model.ProjectDate" For="@(() => model.ProjectDate)" Label="@Localizer["General_ProjectDate"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Description" For="@(() => model.Description)" Label="@Localizer["General_Description"]" Required="false" Lines="5" />

            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Start" Class="ma-6">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined">@Localizer["General_Save"]</MudButton>
                @if (Id != null && Id != Guid.Empty)
                {
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" OnClick="DeleteAsync">@Localizer["General_Delete"]</MudButton>
                }
            </MudStack>
        </EditForm>
    </MudPaper>
}


@code {

    [Parameter]
    public Guid? Id { get; set; }

    /// <summary>
    /// Model used for the page.
    /// </summary>
    ProjectFormModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/"),
            new BreadcrumbItem(Localizer["Pages_Projects_ManageProjects_Title"], "/projects")
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Get a list of all the vendors in the system.
            model.Vendors = await AdminContext.Client.SearchVendorsAsync(null, null);

            // Check if there was an ID passed to edit
            if (Id != null)
            {
                var project = await AdminContext.Client.GetProjectAsync(Id.Value);
                model.VsnProjectId = project.VsnProjectId;
                model.ProjectDate = project.Info.ProjectDate.ToLocalTime();
                model.Description = project.Info.Description;
                model.ProjectName = project.Info.Name;
                model.SelectedVendor = model.Vendors?.Find(v => v.VendorId == project.VendorId);
            }
            else
            {
                model.VsnProjectId = Guid.NewGuid().ToString();
            }

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    /// <summary>
    /// Deletes the current project.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAsync()
    {
        if (Id != null && await ConfirmAsync(Localizer["General_ConfirmProjectDelete"]))
        {
            try
            {
                IsBusy = true;

                // Delete the vendor
                await AdminContext.Client.DeleteProjectAsync(Id.Value);

                IsBusy = false;

                // Add snackbar item.
                Snackbar.Add(Localizer["General_ProjectDeleted"], Severity.Normal);

                Navigation.NavigateTo($"/projects");
            }
            catch (Exception ex)
            {
                ShowError(ex);
            }
        }
    }


    /// <summary>
    /// Saves the user information.
    /// </summary>
    /// <returns></returns>
    async Task SaveAsync()
    {
        if (model.SelectedVendor == null || model.ProjectDate == null)
        {
            return;
        }

        try
        {
            IsBusy = true;

            // Collect the form data to save.
            var projectInfo = new ProjectInfo
            {
                Name = model.ProjectName,
                ProjectDate = model.ProjectDate.Value.ToUniversalTime(),
                Description = model.Description
            };

            // Create or update the entity
            if (Id == null || Id == Guid.Empty)
            {
                await AdminContext.Client.CreateProjectAsync(model.SelectedVendor.VendorId, model.VsnProjectId, projectInfo);
            }
            else
            {
                await AdminContext.Client.UpdateProjectAsync(Id.Value, projectInfo);
            }

            IsBusy = false;

            // Add snackbar item.
            Snackbar.Add(Localizer["General_ProjectSaved"], Severity.Normal);

            Navigation.NavigateTo($"/projects");
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class ProjectFormModel
    {
        [Required]
        [RegularExpression(Constants.GuidFormat)]
        public string? VsnProjectId { get; set; }
        [Required]
        public string? ProjectName { get; set; }
        [Required]
        public DateTime? ProjectDate { get; set; } = DateTime.Now;
        public string? Description {get; set;}
        public VendorModel? SelectedVendor { get; set; }
        public List<VendorModel>? Vendors { get; set; }
    }
}