@page "/project/vendors"
@inherits BasePage

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />

<PageTitle>@Localizer["Pages_Projects_AddProjects_Title"]</PageTitle>
<MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Projects_AddProjects_Title"]</MudText>

@if (IsInitialized)
{
    <MudPaper Class="pa-3">
        <EditForm Model="model" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />
            <MudStack Row="false">
                <MudSelect Class="form-field" Margin="Margin.Dense" MultiSelection="true" ToStringFunc="@((e) => e.Info.Code)" MultiSelectionTextFunc="@((vendors) => GetVendorNames(vendors))" Variant="Variant.Outlined" Clearable="true" T="VendorModel" @bind-SelectedValues="model.SelectedVendors" Label="@Localizer["General_VendorName"]" Required="true">
                    @if (model.Vendors != null)
                    {
                        foreach (var vendor in model.Vendors)
                        {
                            <MudSelectItem T="VendorModel" Value="@vendor">@vendor.Info.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.ProjectName" For="@(() => model.ProjectName)" Label="@Localizer["General_ProjectName"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.VsnProjectId" For="@(() => model.VsnProjectId)" Label="@Localizer["General_VsnProjectId"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Format="yyyy-MM-dd" InputType="InputType.Date" @bind-Value="model.ProjectDate" For="@(() => model.ProjectDate)" Label="@Localizer["General_ProjectDate"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Description" For="@(() => model.Description)" Label="@Localizer["General_Description"]" Required="false" Lines="5" />

            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Start" Class="ma-6">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined">@Localizer["General_Save"]</MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
}


@code {

    /// <summary>
    /// Model used for the page.
    /// </summary>
    ProjectFormModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/"),
            new BreadcrumbItem(Localizer["Pages_Projects_ManageProjects_Title"], "/projects")
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Get a list of all the vendors in the system.
            model.Vendors = await AdminContext.Client.SearchVendorsAsync(null, null);
            model.VsnProjectId = Guid.NewGuid().ToString();

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    string GetVendorNames(List<string> selectedVendors)
    {
        if(selectedVendors == null || selectedVendors.Count == 0)
        {
            return string.Empty;
        }
        return string.Join(", ", selectedVendors);
    }

    /// <summary>
    /// Saves the user information.
    /// </summary>
    /// <returns></returns>
    async Task SaveAsync()
    {
        if (model.SelectedVendors == null || model.ProjectDate == null)
        {
            return;
        }

        try
        {
            IsBusy = true;

            // Collect the form data to save.
            var projectInfo = new ProjectInfo
                {
                    Name = model.ProjectName,
                    ProjectDate = model.ProjectDate.Value.ToUniversalTime(),
                    Description = model.Description
                };

            // Create or update the entity
            await AdminContext.Client.CreateProjectsAsync(new CreateProjectsModel
            {
                Info = projectInfo,
                VendorIds = model.SelectedVendors.Select(v=>v.VendorId).ToList(),
                VsnProjectId = model.VsnProjectId
            });

            IsBusy = false;

            // Add snackbar item.
            Snackbar.Add(Localizer["General_ProjectSaved"], Severity.Normal);

            Navigation.NavigateTo($"/projects");
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class ProjectFormModel
    {
        [Required]
        [RegularExpression(Constants.GuidFormat)]
        public string? VsnProjectId { get; set; }
        [Required]
        public string? ProjectName { get; set; }
        [Required]
        public DateTime? ProjectDate { get; set; } = DateTime.Now;
        public string? Description { get; set; }
        public IEnumerable<VendorModel>? SelectedVendors { get; set; }
        public List<VendorModel>? Vendors { get; set; }
    }
}