@page "/users"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />
<PageTitle>@Localizer["Pages_Users_ManageUsers_Title"]</PageTitle>
<MudText Typo="Typo.h1" Class="mb-3">@Localizer["Pages_Users_ManageUsers_Title"]</MudText>

@if (IsInitialized)
{
    <MudPaper Class="pa-3">
        <MudGrid>
            <MudItem>
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Keyword" Label="@Localizer["General_Keyword"]" Placeholder="@Localizer["Placeholder_Keyword"]" />
            </MudItem>
            <MudItem>
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="UserStatusType?" @bind-Value="model.Status" Label="@Localizer["General_UserStatus"]">
                    <MudSelectItem T="UserStatusType?" Value="@UserStatusType.Active">@Localizer[$"UserStatusType_{UserStatusType.Active}"]</MudSelectItem>
                    <MudSelectItem T="UserStatusType?" Value="@UserStatusType.Blocked">@Localizer[$"UserStatusType_{UserStatusType.Blocked}"]</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="VendorModel" @bind-Value="model.SelectedVendor" Label="@Localizer["General_VendorName"]">
                    @if (model.Vendors != null)
                    {
                        foreach (var vendor in model.Vendors)
                        {
                            <MudSelectItem T="VendorModel" Value="@vendor">@vendor.Info.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.Search" Title="@Localizer["General_Search"]" Size="Size.Large" OnClick="SearchAsync" />
                    <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.Add" Title="@Localizer["General_AddUser"]" Size="Size.Large" OnClick="@(() => Navigation.NavigateTo($"/user"))" />
                </MudStack>
            </MudItem>
        </MudGrid>

        @if (model.Results != null)
        {
            <MudText Typo="Typo.h2" Class="mt-3">@Localizer["General_SearchResults"]</MudText>
            <MudTable RowClass="cursor-pointer" Class="my-3" Dense="true" Hover="true" Striped="true" T="UserModel" Items="model.Results" OnRowClick="@((e) => Navigation.NavigateTo($"/user/{e.Item.UserId}"))">
                <HeaderContent>
                    <MudTh>@Localizer["General_Username"]</MudTh>
                    <MudTh>@Localizer["General_Name"]</MudTh>
                    <MudTh>@Localizer["General_Status"]</MudTh>
                    <MudTh>@Localizer["General_VendorName"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Info.Username</MudTd>
                    <MudTd>@($"{context.Info.FirstName} {context.Info.LastName}".Trim())</MudTd>
                    <MudTd>@Localizer[$"UserStatusType_{context.Info.Status}"]</MudTd>
                    <MudTd>@GetVendorName(context.VendorId)</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
}

@code {

    /// <summary>
    /// Model used for the page.
    /// </summary>
    UserSearchModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/"),
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Get a list of all the vendors in the system.
            model.Vendors = await AdminContext.Client.SearchVendorsAsync(null, null);

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    /// <summary>
    /// Searches for users based on the current criteria.
    /// </summary>
    /// <returns></returns>
    async Task SearchAsync()
    {
        try
        {
            IsBusy = true;
            model.Results = await AdminContext.Client.SearchVendorUsersAsync(model.Keyword, model.SelectedVendor?.VendorId, model.Status);
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Helper method to look up a vendor name.
    /// </summary>
    /// <param name="vendorId"></param>
    /// <returns></returns>
    string? GetVendorName(Guid vendorId)
    {
        return model?.Vendors?.Find(v => v.VendorId == vendorId)?.Info.Name;
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class UserSearchModel
    {
        public string? Keyword { get; set; }
        public UserStatusType? Status { get; set; }
        public VendorModel? SelectedVendor { get; set; }
        public List<VendorModel>? Vendors { get; set; }
        public List<UserModel>? Results { get; set; }
    }


}