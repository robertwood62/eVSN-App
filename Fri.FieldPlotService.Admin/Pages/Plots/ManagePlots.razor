@page "/plots"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />
<PageTitle>@Localizer["Pages_Plots_ManagePlots_Title"]</PageTitle>
<MudText Typo="Typo.h1" Class="mb-3">@Localizer["Pages_Plots_ManagePlots_Title"]</MudText>

@if (IsInitialized)
{
    <MudPaper Class="pa-3">
        <MudGrid>
            <MudItem>
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Keyword" Label="@Localizer["General_PlotNameKeyword"]" Placeholder="@Localizer["Placeholder_Keyword"]" />
            </MudItem>
            <MudItem>
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="VendorModel" @bind-Value="model.SelectedVendor" Label="@Localizer["General_VendorName"]">
                    @if (model.Vendors != null)
                    {
                        foreach (var vendor in model.Vendors)
                        {
                            <MudSelectItem T="VendorModel" Value="@vendor">@vendor.Info.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="ProjectModel" @bind-Value="model.SelectedProject" Label="@Localizer["General_ProjectName"]">
                    @if (model.Projects != null)
                    {
                        foreach (var project in model.Projects)
                        {
                            <MudSelectItem T="ProjectModel" Value="@project">@($"{project.Info.Name} [{GetVendorName(project.VendorId)}]")</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudCheckBox Size="Size.Medium" @bind-Checked="model.IncludeDeleted" />
                    <MudText>@Localizer["General_IncludeDeleted"]</MudText>
                </MudStack>
            </MudItem>
            <MudItem>
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.Search" Title="@Localizer["General_Search"]" Size="Size.Large" OnClick="SearchAsync" />
                    <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.LibraryAdd" Title="@Localizer["General_ImportPlots"]" Size="Size.Large" OnClick="@(() => Navigation.NavigateTo("plots/import"))" />
                </MudStack>
            </MudItem>
        </MudGrid>

        @if (model.Results != null)
        {
            <MudText Typo="Typo.h2" Class="mt-3">@Localizer["General_SearchResults"]</MudText>
            <MudTable RowClass="cursor-pointer" Class="my-3" Dense="true" Hover="true" Striped="true" T="PlotModel" Items="model.Results" OnRowClick="@((e) => Navigation.NavigateTo($"/plot/{e.Item.PlotId}"))">
                <HeaderContent>
                    <MudTh>@Localizer["General_VsnPlotName"]</MudTh>
                    <MudTh>@Localizer["General_VsnPlotTypeCode"]</MudTh>
                    <MudTh>@Localizer["General_VsnMeasureTypeCode"]</MudTh>
                    <MudTh>@Localizer["General_VsnMeasureYear"]</MudTh>
                    <MudTh>@Localizer["General_ProjectName"]</MudTh>
                    <MudTh>@Localizer["General_VendorName"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@(FormatHelper.GetValue(context.Data, "VSNPLOTNAME"))</MudTd>
                        <MudTd>@(FormatHelper.GetValue(context.Data, "VSNPLOTTYPECODE"))</MudTd>
                        <MudTd>@(FormatHelper.GetValue(context.Data, "MEASURETYPECODE"))</MudTd>
                        <MudTd>@(FormatHelper.GetValue(context.Data, "MEASUREYEAR"))</MudTd>
                    <MudTd>@(GetProjectName(context.VendorId, FormatHelper.GetValue(context.Data, "PROJECTID")))</MudTd>
                    <MudTd>@(GetVendorName(context.VendorId))</MudTd>
                    </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
}

@code {

    /// <summary>
    /// Model used for the page.
    /// </summary>
    PlotSearchModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/")
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Get a list of all the vendors in the system.
            model.Vendors = await AdminContext.Client.SearchVendorsAsync(null, null);
            model.Projects = await AdminContext.Client.SearchProjectsAsync(null, null, false);

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    /// <summary>
    /// Searches for plots based on the current criteria.
    /// </summary>
    /// <returns></returns>
    async Task SearchAsync()
    {
        try
        {
            IsBusy = true;
            model.Results = await AdminContext.Client.SearchPlotsAsync(model.Keyword, model.SelectedVendor?.VendorId, model.SelectedProject?.VsnProjectId, model.IncludeDeleted);
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Helper method to look up a vendor name.
    /// </summary>
    /// <param name="vendorId"></param>
    /// <returns></returns>
    string? GetVendorName(Guid vendorId)
    {
        return model?.Vendors?.Find(v => v.VendorId == vendorId)?.Info.Name;
    }

    /// <summary>
    /// Gets the project name.
    /// </summary>
    /// <param name="vendorId"></param>
    /// <param name="vsnProjectId"></param>
    /// <returns></returns>
    string? GetProjectName(Guid vendorId, string? vsnProjectId)
    {
        return model?.Projects?.Find(v => v.VendorId == vendorId && string.Compare(v.VsnProjectId, vsnProjectId, true) == 0)?.Info.Name;
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class PlotSearchModel
    {
        public string? Keyword { get; set; }
        public bool IncludeDeleted { get; set; }
        public VendorModel? SelectedVendor { get; set; }
        public ProjectModel? SelectedProject { get; set; }
        public List<VendorModel>? Vendors { get; set; }
        public List<ProjectModel>? Projects { get; set; }
        public List<PlotModel>? Results { get; set; }
    }


}