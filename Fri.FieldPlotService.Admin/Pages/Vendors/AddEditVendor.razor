@page "/vendor/{Id:guid?}"
@inherits BasePage

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />

@if (IsInitialized)
{
    if (Id == null)
    {
        <PageTitle>@Localizer["Pages_Vendors_AddVendor_Title"]</PageTitle>
        <MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Vendors_AddVendor_Title"]</MudText>
    }
    else
    {
        <PageTitle>@Localizer["Pages_Vendors_EditVendor_Title"]</PageTitle>
        <MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Vendors_EditVendor_Title"]</MudText>
    }

    <MudPaper Class="pa-3">
        <EditForm Model="model" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />
            <MudStack Row="false">
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Name" For="@(() => model.Name)" Label="@Localizer["General_VendorName"]" Required="true" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Code" For="@(() => model.Code)" Label="@Localizer["General_VendorCode"]" Required="true" />
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" T="VendorStatusType" @bind-Value="model.Status" Label="@Localizer["General_VendorStatus"]">
                    <MudSelectItem T="VendorStatusType" Value="@VendorStatusType.Active">@Localizer[$"VendorStatusType_{VendorStatusType.Active}"]</MudSelectItem>
                    <MudSelectItem T="VendorStatusType" Value="@VendorStatusType.Blocked">@Localizer[$"VendorStatusType_{VendorStatusType.Blocked}"]</MudSelectItem>
                </MudSelect>
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.ContactInfo" For="@(() => model.Comment)" Label="@Localizer["General_ContactInfo"]" Required="false" Lines="6" />
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Comment" For="@(() => model.Comment)" Label="@Localizer["General_Comment"]" Required="false" Lines="6" />
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Start" Class="ma-6">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined">@Localizer["General_Save"]</MudButton>
                @if (Id != null && Id != Guid.Empty)
                {
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" OnClick="DeleteAsync">@Localizer["General_Delete"]</MudButton>
                }
            </MudStack>
        </EditForm>
    </MudPaper>
}


@code {

    [Parameter]
    public Guid? Id { get; set; }

    /// <summary>
    /// Model used for the page.
    /// </summary>
    VendorFormModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/"),
            new BreadcrumbItem(Localizer["Pages_Vendors_ManageVendors_Title"], "/vendors")
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Check if there was an ID passed to edit
            if (Id != null)
            {
                var vendor = await AdminContext.Client.GetVendorAsync(Id.Value);
                model.Status = vendor.Info.Status;
                model.Code = vendor.Info.Code;
                model.Name = vendor.Info.Name;
                model.Comment = vendor.Info.Comment;
                model.ContactInfo = vendor.Info.ContactInfo;
            }

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    /// <summary>
    /// Deletes the current vendor.
    /// </summary>
    /// <returns></returns>
    async Task DeleteAsync()
    {
        if (Id != null && await ConfirmAsync(Localizer["General_ConfirmVendorDelete"]))
        {
            try
            {
                IsBusy = true;

                // Delete the vendor
                await AdminContext.Client.DeleteVendorAsync(Id.Value);

                IsBusy = false;

                // Add snackbar item.
                Snackbar.Add(Localizer["General_VendorDeleted"], Severity.Normal);

                Navigation.NavigateTo($"/vendors");
            }
            catch (Exception ex)
            {
                ShowError(ex);
            }
        }
    }

    /// <summary>
    /// Saves the vendor information.
    /// </summary>
    /// <returns></returns>
    async Task SaveAsync()
    {
        try
        {
            IsBusy = true;

            // Collect the form data to save.
            var vendorInfo = new VendorInfo
            {
                Code = model.Code,
                Comment = model.Comment,
                ContactInfo = model.ContactInfo,
                Status = model.Status,
                Name = model.Name
            };

            // Create or update the data set
            if (Id == null || Id == Guid.Empty)
            {
                await AdminContext.Client.CreateVendorAsync(vendorInfo);
            }
            else
            {
                await AdminContext.Client.UpdateVendorInfoAsync(Id.Value, vendorInfo);
            }

            IsBusy = false;

            // Add snackbar item.
            Snackbar.Add(Localizer["General_VendorSaved"], Severity.Normal);

            Navigation.NavigateTo($"/vendors");
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class VendorFormModel
    {
        [Required]
        public string? Name { get; set; }
        [Required]
        public string? Code { get; set; }
        public VendorStatusType Status { get; set; } = VendorStatusType.Active;
        public string? ContactInfo { get; set; }
        public string? Comment { get; set; }
    }
}
