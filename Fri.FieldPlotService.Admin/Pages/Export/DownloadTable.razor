@page "/export"
@using System.Net;
@inherits BasePage
@inject DownloadHelper downloadHelper
@attribute [Authorize]

<BusyIndicator Model="@this" />
<MudBreadcrumbs Items="@Breadcrumbs" />
<PageTitle>@Localizer["Pages_Reports_DownloadTable_Title"]</PageTitle>
<MudText Class="mb-3" Typo="Typo.h1">@Localizer["Pages_Reports_DownloadTable_Title"]</MudText>

@if (IsInitialized)
{
    <MudPaper Class="pa-3">
        <EditForm Model="model" OnValidSubmit="DownloadReportAsync">
            <DataAnnotationsValidator />
            <MudStack Row="false">
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Label="@Localizer["General_VsnTableName"]" @bind-Value="model.Table" For="@(() => model.Table)" Required="true">
                    @foreach (var table in Constants.VsnTables)
                    {
                        <MudSelectItem Value="@table">@table</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable="true" T="VendorModel" @bind-Value="model.SelectedVendor" For="@(() => model.SelectedVendor)" Label="@Localizer["General_VendorName"]" Required="false">
                    @if (model.Vendors != null)
                    {
                        foreach (var vendor in model.Vendors)
                        {
                            <MudSelectItem T="VendorModel" Value="@vendor">@vendor.Info.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTextField Class="form-field" Margin="Margin.Dense" Variant="Variant.Outlined" T="DateTime" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="model.LastChanged" For="@(() => model.LastChanged)" Label="@Localizer["General_LastChanged"]" Required="true" />
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Start" Class="ma-6">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined">@Localizer["General_Download"]</MudButton>
            </MudStack>
        </EditForm>
    </MudPaper>
}


@code {

    /// <summary>
    /// Model used for the page.
    /// </summary>
    ExportFormModel model = new();

    /// <summary>
    /// Initialize the page.
    /// </summary>
    protected override void OnInitialized()
    {
        Breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(Localizer["Menu_Home"], "/")
        };
    }

    /// <summary>
    /// Initializes the page.
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            // Get a list of all the vendors in the system.
            model.Vendors = await AdminContext.Client.SearchVendorsAsync(null, null);

            IsInitialized = true;
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }

    }

    /// <summary>
    /// Downloads the data.
    /// </summary>
    /// <returns></returns>
    async Task DownloadReportAsync()
    {
        try
        {
            IsBusy = true;
            var relativePath = $"/api/Admin/export/csv?table={model.Table}";
            if(model.SelectedVendor != null)
            {
                relativePath += $"&vendorCode={WebUtility.UrlEncode(model.SelectedVendor.Info.Code)}";
            }
            relativePath += $"&lastChanged={WebUtility.UrlEncode(model.LastChanged.Date.ToUniversalTime().ToString())}";

            var fileStream = await downloadHelper.DownloadAsync(HttpMethod.Get, relativePath);
            var fileName = $"{model.Table}.csv";

            IsBusy = false;

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    /// <summary>
    /// Model class for this page.
    /// </summary>
    class ExportFormModel
    {
        [Required]
        public string? Table { get; set; }
        public VendorModel? SelectedVendor { get; set; }
        public List<VendorModel>? Vendors { get; set; }
        [Required]
        public DateTime LastChanged { get; set; } = new DateTime(2010, 1, 1);
    }
}